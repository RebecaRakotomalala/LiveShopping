{% extends 'base.html.twig' %}

{% block title %}Live en direct{% endblock %}

{% block body %}
    <div class="container mt-5">
        <h1 class="text-center mb-4">ðŸŽ¥ Regarder le Live</h1>

        <div class="video-container text-center">
            <video id="viewerVideo" autoplay playsinline controls width="100%" class="mb-4"></video>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        const viewerId = '{{ userId }}'; // <- ID du user connectÃ© injectÃ© depuis PHP

        document.addEventListener("DOMContentLoaded", function () {
            const signalingServer = new WebSocket('ws://localhost:8080');
            let peerConnection;

            signalingServer.onopen = () => {
                console.log('Connexion au signaling server Ã©tablie');
                signalingServer.send(JSON.stringify({
                    type: 'viewer',
                    viewerId: viewerId  // <- identifiant utilisateur envoyÃ©
                }));
            };

            signalingServer.onerror = (error) => {
                console.error('Erreur WebSocket:', error);
            };

            signalingServer.onclose = () => {
                console.log('Connexion WebSocket fermÃ©e');
            };

            signalingServer.onmessage = async (event) => {
                const data = JSON.parse(event.data);
                console.log('Message reÃ§u du signaling server:', data);

                if (data.type === 'offer') {
                    peerConnection = new RTCPeerConnection();

                    peerConnection.ontrack = event => {
                        const video = document.getElementById('viewerVideo');
                        if (event.streams && event.streams[0]) {
                            video.srcObject = event.streams[0];
                        }
                    };

                    peerConnection.onicecandidate = e => {
                        if (e.candidate) {
                            signalingServer.send(JSON.stringify({
                                type: 'candidate',
                                candidate: e.candidate,
                                target: 'streamer',
                                viewerId: viewerId  // <- inclure lâ€™ID ici aussi
                            }));
                        }
                    };

                    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);

                    signalingServer.send(JSON.stringify({
                        type: 'answer',
                        answer: answer,
                        viewerId: viewerId  // <- idem ici
                    }));
                }
                else if (data.type === 'candidate') {
                    if (peerConnection) {
                        await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
                    }
                }
            };
        });
    </script>
{% endblock %}
