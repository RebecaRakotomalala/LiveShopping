{% extends 'base.html.twig' %}

{% block title %}Live en direct{% endblock %}

{% block body %}
    <div class="form-group mb-4">
        <label for="adminSelect">üéôÔ∏è Choisissez un live :</label>
        <select id="adminSelect" class="form-control">
            <option disabled selected>-- S√©lectionner un streamer --</option>
            {% for live in lives %}
                <option value="{{ live.seller.id }}">{{ live.seller.username }}</option>
            {% endfor %}
        </select>
    </div>

    <div class="container mt-5">
        <h1 class="text-center mb-4">üé• Regarder le Live</h1>

        <div class="video-container text-center">
            <video id="viewerVideo" autoplay playsinline controls muted width="100%" class="mb-4"></video>
            <div id="status" class="alert alert-info">En attente du stream...</div>
            <button id="playButton" class="btn btn-success btn-lg" style="display: none;">
                ‚ñ∂Ô∏è Cliquer pour d√©marrer le live
            </button>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        const viewerId = '{{ userId }}';

        function debugLog(message) {
            console.log(message);
        }

        document.addEventListener("DOMContentLoaded", function () {
            debugLog(`üöÄ Viewer d√©marr√©: ID = ${viewerId}`);

            const signalingServer = new WebSocket("wss://192.168.88.21:9090/");
            let peerConnection;
            const statusDiv = document.getElementById('status');
            const playButton = document.getElementById('playButton');
            const video = document.getElementById('viewerVideo');
            const adminSelect = document.getElementById('adminSelect');

            let selectedAdminId = null;

            playButton.addEventListener('click', () => {
                video.play().then(() => {
                    debugLog('‚úÖ Lecture manuelle d√©marr√©e');
                    playButton.style.display = 'none';
                    statusDiv.textContent = 'Stream en cours...';
                    statusDiv.className = 'alert alert-success';
                }).catch(e => {
                    debugLog(`‚ùå Erreur lecture: ${e.message}`);
                });
            });

            signalingServer.onopen = () => {
                debugLog('‚úÖ WebSocket ouvert');
                statusDiv.textContent = 'WebSocket connect√©. S√©lectionnez un live.';
            };

            signalingServer.onerror = error => {
                console.log("‚ùå Erreur WebSocket:", error); // Affiche l'objet complet
                debugLog("‚ùå Erreur WebSocket:", error);    // Si debugLog() est une fonction maison
                statusDiv.textContent = 'Erreur de connexion WebSocket';
                statusDiv.className = 'alert alert-danger';
            };

            signalingServer.onclose = () => {
                console.warn("üîå Connexion WebSocket ferm√©e.");
                console.warn("Code:", event.code);
                console.warn("Raison:", event.reason);
                console.warn("√âtait-ce propre ?", event.wasClean);
                debugLog('üîå WebSocket ferm√©');
                statusDiv.textContent = 'Connexion WebSocket ferm√©e';
                statusDiv.className = 'alert alert-warning';
            };

            // Lorsqu‚Äôun streamer est s√©lectionn√©
            adminSelect.addEventListener('change', () => {
                selectedAdminId = adminSelect.value;
                debugLog(`üéØ Streamer s√©lectionn√©: ${selectedAdminId}`);

                if (signalingServer.readyState === WebSocket.OPEN) {
                    signalingServer.send(JSON.stringify({
                        type: 'viewer',
                        viewerId: viewerId,
                        adminId: selectedAdminId
                    }));

                    statusDiv.textContent = 'Demande de connexion au streamer...';
                }
            });

            signalingServer.onmessage = async event => {
                const data = JSON.parse(event.data);
                debugLog(`üì© Message re√ßu: ${data.type}`);

                if (data.type === 'streamerUnavailable') {
                    statusDiv.textContent = 'Le streamer n\'est pas disponible';
                    statusDiv.className = 'alert alert-warning';
                    return;
                }

                if (data.type === 'offer') {
                    peerConnection = new RTCPeerConnection({
                        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
                    });

                    peerConnection.ontrack = event => {
                        if (event.streams && event.streams[0]) {
                            video.srcObject = event.streams[0];
                            video.play().then(() => {
                                statusDiv.textContent = 'Stream en cours...';
                                statusDiv.className = 'alert alert-success';
                            }).catch(err => {
                                playButton.style.display = 'block';
                                statusDiv.textContent = 'Stream pr√™t. Cliquez pour d√©marrer';
                                statusDiv.className = 'alert alert-warning';
                            });
                        }
                    };

                    peerConnection.onicecandidate = e => {
                        if (e.candidate) {
                            signalingServer.send(JSON.stringify({
                                type: 'candidate',
                                candidate: e.candidate,
                                target: 'streamer',
                                viewerId: viewerId
                            }));
                        }
                    };

                    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);

                    signalingServer.send(JSON.stringify({
                        type: 'answer',
                        answer: answer,
                        viewerId: viewerId
                    }));
                }

                else if (data.type === 'candidate') {
                    if (peerConnection) {
                        await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
                    }
                }
            };
        });
    </script>
{% endblock %}
